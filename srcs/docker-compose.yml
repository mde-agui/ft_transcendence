services:
  web:
    container_name: ft_transcendence
    build:
      context: .
      dockerfile: Dockerfile
    image: ft_transcendence
    ports:
      - "3000:3000"
    volumes:
      - ./data:/usr/src/app/data
      - ./certs:/usr/src/app/certs
    environment:
      - DB_PATH=/usr/src/app/data/database.db
    command: npm run dev
    networks:
      - transcendence
    restart: unless-stopped

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: src-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    environment:
      - MODSEC_RULE_ENGINE=on
      - BACKEND=http://web:3000
      # Let the image handle template processing normally
      - MODSEC_AUDIT_LOG_PARTS=ABCFHZ
      - MODSEC_AUDIT_LOG_TYPE=Concurrent
      - MODSEC_AUDIT_LOG=/var/log/modsec_audit.log
    volumes:
      - ./nginx/ssl:/etc/nginx/conf
      - ./nginx/modsec/custom_rules.conf:/opt/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf:ro
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "curl", "-f", "--insecure", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  db:
    image: alpine:latest
    volumes:
      - ./data:/usr/src/app/data
    networks:
      - transcendence
    command: sh -c "apk add --no-cache sqlite && touch /usr/src/app/data/database.db && sqlite3 /usr/src/app/data/database.db 'CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY);' && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "sqlite3", "/usr/src/app/data/database.db", ".tables"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

networks:
  transcendence:
    driver: bridge

volumes:
  db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
